{"version":3,"sources":["pages/countries/redux/countActions.js","pages/Spinners.js","pages/SideNavLinks.js","pages/reducers.js","pages/SidebarLeft.js"],"names":["getMostRecentCase","key","urlType","dispatch","a","type","countAT","GETTING_MOST_RECENT_CASE","true_or_false","url","axios","get","data","result","GET_MOST_RECENT_CASE","success","response","cleanMostRecentCase","CLEAN_ACTIVE_COUNTRY_CASES","getFirstCase","GETTING_FIRST_CASE","GET_FIRST_CASE","cleanFirstCase","CLEAN_FIRST_CASE","getFirstDeath","GETTING_FIRST_DEATH","GET_FIRST_DEATH","cleanFirstDeath","CLEAN_FIRST_DEATH","getCountries","GETTING_COUNTRIES","metadata","results","GET_COUNTRIES","countries","getCountryByName","name","GETTING_COUNTRY_BY_NAME","country","GET_COUNTRY_BY_NAME","getActiveCountryCases","info","_id","fromDate","toDate","GETTING_ACTIVE_COUNTRY_CASES","GET_ACTIVE_COUNTRY_CASES","cases","cleanActiveCountryCases","getCountryInViewCases","GETTING_COUNTRY_IN_VIEW_CASE","GET_COUNTRY_IN_VIEW_CASE","BorderSpinner","size","animation","role","className","SideNavLinks","props","getProps","isCurrent","filterCountRed","state","action","displayCountries","SidebarLeft","useDispatch","useSelector","cont","gettingCountries","useReducer","infoDispatch","useEffect","Container","InputGroup","FormControl","onChange","e","query","target","value","filter","c","toLowerCase","includes","placeholder","aria-label","aria-describedby","map","short_name","src","alt","to"],"mappings":"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","file":"static/js/7.34603765.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport { countAT } from './countAT';\n\nexport const getMostRecentCase = (key, urlType) => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_MOST_RECENT_CASE, true_or_false: true });\n  const url =\n    urlType === 'name'\n      ? `/most-recent-case-by-name?countryName=${key}`\n      : `/most-recent-case-by-id?country=${key}`;\n  try {\n    const { data } = await axios.get(url);\n    const { result } = data;\n\n    dispatch({ type: countAT.GET_MOST_RECENT_CASE, result });\n    dispatch({ type: countAT.GETTING_MOST_RECENT_CASE, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_MOST_RECENT_CASE, true_or_false: false });\n    return data;\n  }\n};\n\nexport const cleanMostRecentCase = () => async (dispatch) => {\n  dispatch({ type: countAT.CLEAN_ACTIVE_COUNTRY_CASES });\n};\n\nexport const getFirstCase = (key, urlType) => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_FIRST_CASE, true_or_false: true });\n  const url =\n    urlType === 'name'\n      ? `/first-case-by-name?countryName=${key}`\n      : `/first-case-by-id?country=${key}`;\n  try {\n    const { data } = await axios.get(url);\n    const { result } = data;\n\n    dispatch({ type: countAT.GET_FIRST_CASE, result });\n    dispatch({ type: countAT.GETTING_FIRST_CASE, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_FIRST_CASE, true_or_false: false });\n    return data;\n  }\n};\n\nexport const cleanFirstCase = () => async (dispatch) => {\n  dispatch({ type: countAT.CLEAN_FIRST_CASE });\n};\n\nexport const getFirstDeath = (key, urlType) => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_FIRST_DEATH, true_or_false: true });\n  const url =\n    urlType === 'name'\n      ? `/first-death-by-name?countryName=${key}`\n      : `/first-death-by-id?country=${key}`;\n  try {\n    const { data } = await axios.get(url);\n    const { result } = data;\n\n    dispatch({ type: countAT.GET_FIRST_DEATH, result });\n    dispatch({ type: countAT.GETTING_FIRST_DEATH, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_FIRST_DEATH, true_or_false: false });\n    return data;\n  }\n};\n\nexport const cleanFirstDeath = () => async (dispatch) => {\n  dispatch({ type: countAT.CLEAN_FIRST_DEATH });\n};\n\nexport const getCountries = () => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: true });\n  try {\n    const { data } = await axios.get('/all-countries');\n    const { metadata, results } = data;\n\n    dispatch({ type: countAT.GET_COUNTRIES, countries: results, metadata });\n    dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: false });\n    return data;\n  }\n};\n\nexport const getCountryByName = (name) => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_COUNTRY_BY_NAME, true_or_false: true });\n  try {\n    const { data } = await axios.get(`/country?name=${name}`);\n    const { country } = data;\n    dispatch({ type: countAT.GET_COUNTRY_BY_NAME, country });\n    dispatch({ type: countAT.GETTING_COUNTRY_BY_NAME, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_COUNTRY_BY_NAME, true_or_false: false });\n    return data;\n  }\n};\n\nexport const getActiveCountryCases = (info) => async (dispatch) => {\n  const { _id, fromDate, toDate } = info;\n  dispatch({ type: countAT.GETTING_ACTIVE_COUNTRY_CASES, true_or_false: true });\n  try {\n    const { data } = await axios.get(\n      `/cases?country=${_id}&fromDate=${fromDate}&toDate=${toDate}&skip=0&limit=100`\n    );\n    const { metadata, results } = data;\n    dispatch({\n      type: countAT.GET_ACTIVE_COUNTRY_CASES,\n      cases: results,\n      metadata,\n    });\n    dispatch({\n      type: countAT.GETTING_ACTIVE_COUNTRY_CASES,\n      true_or_false: false,\n    });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({\n      type: countAT.GETTING_ACTIVE_COUNTRY_CASES,\n      true_or_false: false,\n    });\n    return data;\n  }\n};\n\nexport const cleanActiveCountryCases = () => async (dispatch) => {\n  dispatch({ type: countAT.CLEAN_ACTIVE_COUNTRY_CASES });\n};\n\nexport const getCasesByCountryName = (info) => async (dispatch) => {\n  const { countryName, fromDate, toDate } = info;\n  dispatch({\n    type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n    true_or_false: true,\n  });\n  try {\n    const { data } = await axios.get(\n      `/cases?countryName=${countryName}&fromDate=${fromDate}&toDate=${toDate}&skip=0&limit=100`\n    );\n    const { metadata, results } = data;\n    dispatch({\n      type: countAT.GET_CASES_BY_COUNTRY_NAME,\n      cases: results,\n      metadata,\n    });\n    dispatch({\n      type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n      true_or_false: false,\n    });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({\n      type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n      true_or_false: false,\n    });\n    return data;\n  }\n};\n\nexport const getCountryInViewCases = (info) => async (dispatch) => {\n  const { _id, name, fromDate, toDate } = info;\n  dispatch({ type: countAT.GETTING_COUNTRY_IN_VIEW_CASE, true_or_false: true });\n  try {\n    const { data } = await axios.get(\n      `/cases?country=${_id}&fromDate=${fromDate}&toDate=${toDate}&skip=0&limit=100`\n    );\n    const { metadata, results } = data;\n    dispatch({\n      name,\n      metadata,\n      cases: results,\n      type: countAT.GET_COUNTRY_IN_VIEW_CASE,\n    });\n    dispatch({\n      type: countAT.GETTING_COUNTRY_IN_VIEW_CASE,\n      true_or_false: false,\n    });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({\n      type: countAT.GETTING_COUNTRY_IN_VIEW_CASE,\n      true_or_false: false,\n    });\n    return data;\n  }\n};\n","import React from 'react';\n\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const BorderSpinner = () => {\n  return (\n    <Spinner\n      size=\"lg\"\n      animation=\"border\"\n      role=\"status\"\n      className=\"border-spinner\"\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n};\n","import React from 'react';\nimport { Link } from '@reach/router';\n\nexport const SideNavLinks = (props) => {\n  // eslint-disable-next-line react/prop-types\n  const { className } = props;\n  return (\n    <Link\n      {...props}\n      getProps={({ isCurrent }) => {\n        // the object returned here is passed to the\n        // anchor element's props\n        return {\n          className: isCurrent ? `${className} active-side-nav` : className,\n        };\n      }}\n    />\n  );\n};\n","export const filterCountRed = (state, action) => {\n  switch (action.type) {\n  case 'POPULATE_COUNTRIES':\n    return { ...state, displayCountries: action.displayCountries };\n  case 'FILTER_COUNTRIES':\n    return {\n      ...state,\n      displayCountries: action.displayCountries,\n    };\n  default:\n    return state;\n  }\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nimport { SideNavLinks } from './SideNavLinks';\nimport { BorderSpinner } from './Spinners';\nimport { filterCountRed } from './reducers';\nimport { getCountries } from './countries/redux/countActions';\n\nconst SidebarLeft = () => {\n  const dispatch = useDispatch();\n  const { countries, gettingCountries } = useSelector((state) => state.cont);\n\n  const [ info, infoDispatch ] = useReducer(filterCountRed, {});\n\n  useEffect(() => {\n    infoDispatch({\n      type: 'POPULATE_COUNTRIES',\n      displayCountries: countries,\n    });\n  }, [ countries ]);\n\n  useEffect(() => {\n    getCountries()(dispatch);\n  }, [ dispatch ]);\n\n  const filterCountries = (query) => {\n    if (!query) {\n      infoDispatch({\n        type: 'FILTER_COUNTRIES',\n        displayCountries: countries,\n      });\n    } else {\n      infoDispatch({\n        type: 'FILTER_COUNTRIES',\n        displayCountries: countries.filter((c) =>\n          c.name.toLowerCase().includes(query.toLowerCase())\n        ),\n      });\n    }\n  };\n\n  return (\n    <Container className=\"left-sidebar sidebar\">\n      <InputGroup className=\"py-3 countries-searchbox\">\n        <FormControl\n          onChange={(e) => {\n            filterCountries(e.target.value);\n          }}\n          placeholder=\"Search\"\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n        />\n      </InputGroup>\n\n      {gettingCountries ? (\n        <BorderSpinner />\n      ) : (\n        <Container className=\"countries-list\">\n          {info.displayCountries.map((c) => {\n            const { _id, name, short_name } = c;\n            return (\n              <div className=\"nav-item card mb-2\" key={_id}>\n                <div className=\"flag-container\">\n                  <img\n                    src={`https://www.countryflags.io/${short_name}/shiny/32.png`}\n                    alt=\"Flag\"\n                  />\n                </div>\n                <SideNavLinks\n                  state={{ name, short_name }}\n                  to={`countries/${_id}`}\n                >\n                  {name}\n                </SideNavLinks>\n              </div>\n            );\n          })}\n        </Container>\n      )}\n    </Container>\n  );\n};\n\nexport default SidebarLeft;\n"],"sourceRoot":""}