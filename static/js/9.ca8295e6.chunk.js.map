{"version":3,"sources":["pages/countries/CountryChartsMulti.js","pages/countries/AllCountries.js"],"names":["CountryChartsMulti","props","dispatch","useDispatch","_id","name","short_name","useSelector","state","cont","inViewCountryCases","gettingCountryInView","useDatePicker","data","dataDispatch","newCases","useRef","newDeaths","totalCases","totalDeaths","useEffect","getCountryInViewCases","toDate","fromDate","current","cleanActiveCountryCases","length","forEach","c","recordDate","new_cases","new_deaths","total_cases","total_deaths","push","qut","totalCasesData","fill","lineTension","pointRadius","label","borderColor","borderColors","warning","backgroundColor","bgColors","map","e","window","Number","newCasesData","success","totalDeathsData","danger","newDeathsData","info","Container","className","CountryPageTitle","DatePicker","LineChartWrapper","dataSets","tooltipLabel","graphLabel","dataPoints","legendContainerId","spinner","legendLabel","yAxisLabel","AllCountries","countries","gettingCountries","slice","key"],"mappings":"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","file":"static/js/9.ca8295e6.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport PropTypes from 'prop-types';\n\nimport { bgColors, borderColors } from '../colors';\n\nimport {\n  getCountryInViewCases,\n  cleanActiveCountryCases,\n} from './redux/countActions';\n\nimport { DatePicker } from '../DatePicker';\nimport LineChartWrapper from '../LineChartWrapper';\nimport { useDatePicker } from './useCustomHooks';\nimport { CountryPageTitle } from './CountryPageTitle';\n\nconst CountryChartsMulti = (props) => {\n  const dispatch = useDispatch();\n\n  const { _id, name, short_name } = props;\n\n  const { [name]: inViewCountryCases, gettingCountryInView } = useSelector(\n    (state) => state.cont\n  );\n\n  const [ data, dataDispatch ] = useDatePicker();\n\n  const newCases = useRef([]);\n  const newDeaths = useRef([]);\n  const totalCases = useRef([]);\n  const totalDeaths = useRef([]);\n\n  // clear state\n  useEffect(() => {\n    getCountryInViewCases({\n      _id,\n      name,\n      toDate: data.toDate,\n      fromDate: data.fromDate,\n    })(dispatch);\n    return () => {\n      newCases.current = [];\n      newDeaths.current = [];\n      totalCases.current = [];\n      totalDeaths.current = [];\n      cleanActiveCountryCases()(dispatch);\n    };\n  }, [ _id, name, data, dispatch ]);\n\n  useEffect(() => {\n    if (inViewCountryCases?.length > 0) {\n      inViewCountryCases.forEach((c) => {\n        const {\n          recordDate,\n          new_cases,\n          new_deaths,\n          total_cases,\n          total_deaths,\n        } = c;\n        newCases.current.push({ qut: new_cases, recordDate });\n        newDeaths.current.push({ qut: new_deaths, recordDate });\n        totalCases.current.push({ qut: total_cases, recordDate });\n        totalDeaths.current.push({ qut: total_deaths, recordDate });\n      });\n    }\n  }, [ inViewCountryCases ]);\n\n  const totalCasesData = {\n    fill: true,\n    lineTension: 0,\n    pointRadius: 0,\n    label: 'Total cases',\n    borderColor: borderColors.warning,\n    backgroundColor: bgColors.warning,\n    data: totalCases.current.map((e) => window.Number(e['qut'])),\n  };\n\n  const newCasesData = {\n    fill: true,\n    lineTension: 0,\n    pointRadius: 0,\n    label: 'New cases',\n    borderColor: borderColors.success,\n    backgroundColor: bgColors.success,\n    data: newCases.current.map((e) => window.Number(e['qut'])),\n  };\n\n  const totalDeathsData = {\n    fill: true,\n    lineTension: 0,\n    pointRadius: 0,\n    label: 'Total deaths',\n    borderColor: borderColors.danger,\n    backgroundColor: bgColors.danger,\n    data: totalDeaths.current.map((e) => window.Number(e['qut'])),\n  };\n\n  const newDeathsData = {\n    fill: true,\n    lineTension: 0,\n    pointRadius: 0,\n    label: 'New deaths',\n    borderColor: borderColors.info,\n    backgroundColor: bgColors.info,\n    data: newDeaths.current.map((e) => window.Number(e['qut'])),\n  };\n\n  return (\n    <Container className=\"country-graph-page\">\n      <CountryPageTitle name={name} short_name={short_name} />\n      <DatePicker data={data} dispatch={dataDispatch} />\n\n      <LineChartWrapper\n        dataSets={[\n          totalCasesData,\n          newCasesData,\n          totalDeathsData,\n          newDeathsData,\n        ]}\n        tooltipLabel={'Cases'}\n        graphLabel={'Combined charts'}\n        dataPoints={totalCases.current}\n        legendContainerId={'total-cases'}\n        borderColor={borderColors.warning}\n        spinner={gettingCountryInView}\n        legendLabel={'Total cases of Covid19'}\n        yAxisLabel={'Total number of Covid19 cases'}\n      />\n    </Container>\n  );\n};\n\nCountryChartsMulti.propTypes = {\n  _id: PropTypes.string,\n  name: PropTypes.string,\n  short_name: PropTypes.string,\n};\n\nexport default CountryChartsMulti;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Container from 'react-bootstrap/Container';\n\nimport CountryChartsMulti from './CountryChartsMulti';\n\nconst AllCountries = () => {\n  const { countries, gettingCountries } = useSelector((state) => state.cont);\n\n  return (\n    <Container>\n      {countries.slice(0, 10).map((c) => {\n        const { _id, name, short_name } = c;\n        return (\n          <Container key={_id}>\n            <CountryChartsMulti _id={_id} name={name} short_name={short_name} />\n          </Container>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default AllCountries;\n"],"sourceRoot":""}