{"version":3,"sources":["pages/countries/redux/countAT.js","pages/countries/redux/countReducer.js","store.js","rootReducer.js","components/Loaders.js","components/Error404.js","components/NavLink.js","components/Navigation.js","components/ErrorBoundary.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["countAT","GET_MOST_RECENT_CASE","CLEAN_MOST_RECENT_CASE","GETTING_MOST_RECENT_CASE","GET_FIRST_CASE","CLEAN_FIRST_CASE","GETTING_FIRST_CASE","GET_FIRST_DEATH","CLEAN_FIRST_DEATH","GETTING_FIRST_DEATH","GET_COUNTRIES","GETTING_COUNTRIES","GET_COUNTRY_BY_NAME","GETTING_COUNTRY_BY_NAME","GET_ACTIVE_COUNTRY_CASES","GETTING_ACTIVE_COUNTRY_CASES","CLEAN_ACTIVE_COUNTRY_CASES","GET_CASES_BY_COUNTRY_NAME","GETTING_CASES_BY_COUNTRY_NAME","GET_COUNTRY_IN_VIEW_CASE","GETTING_COUNTRY_IN_VIEW_CASE","mostRecentCase","_id","new_cases","new_deaths","total_cases","total_deaths","firstCase","firstDeath","initialState","activeCountry","gettingCountry","countries","gettingCountries","activeCountryCases","gettingActiveCountryCases","gettingMostRecentCase","gettingFirstCase","gettingFirstDeath","gettingCasesByCountryName","allCountriesCases","gettingCountryInView","cont","state","action","type","country","length","true_or_false","cases","result","name","middlewares","createLogger","diff","duration","collapsed","logErrors","thunk","devTools","applyMiddleware","store","createStore","loadingBar","loadingBarReducer","Oval","Spinner","style","margin","display","flexDirection","justifyContent","animation","role","className","Error404","location","id","pathname","NavLink","props","getProps","isCurrent","Navigation","Navbar","bg","expand","sticky","variant","collapseOnSelect","Brand","href","onClick","e","preventDefault","navigate","Toggle","aria-controls","Collapse","Nav","to","data-rb-event-key","ErrorBoundary","error","hasError","errRetryMax","errRetries","Number","localStorage","getItem","setItem","info","console","log","this","Sentry","scope","setExtras","eventId","setState","cursor","color","window","reload","children","Component","WorldCases","lazy","SidebarLeft","SidebarRight","AllCountries","CountryCharts","Routes","fallback","Container","fluid","Row","Col","sm","basepath","process","path","default","dsn","axios","defaults","baseURL","App","autoClose","position","toastClassName","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.de35a097.chunk.js","sourcesContent":["export const countAT = {\n  GET_MOST_RECENT_CASE: 'GET_MOST_RECENT_CASE',\n  CLEAN_MOST_RECENT_CASE: 'CLEAN_MOST_RECENT_CASE',\n  GETTING_MOST_RECENT_CASE: 'GETTING_MOST_RECENT_CASE',\n\n  GET_FIRST_CASE: 'GET_FIRST_CASE',\n  CLEAN_FIRST_CASE: 'CLEAN_FIRST_CASE',\n  GETTING_FIRST_CASE: 'GETTING_FIRST_CASE',\n\n  GET_FIRST_DEATH: 'GET_FIRST_DEATH',\n  CLEAN_FIRST_DEATH: 'CLEAN_FIRST_DEATH',\n  GETTING_FIRST_DEATH: 'GETTING_FIRST_DEATH',\n\n  GET_COUNTRIES: 'GET_COUNTRIES',\n  GETTING_COUNTRIES: 'GETTING_COUNTRIES',\n\n  GET_COUNTRY_BY_NAME: 'GET_COUNTRY_BY_NAME',\n  GETTING_COUNTRY_BY_NAME: 'GETTING_COUNTRY_BY_NAME',\n\n  GET_ACTIVE_COUNTRY_CASES: 'GET_ACTIVE_COUNTRY_CASES',\n  GETTING_ACTIVE_COUNTRY_CASES: 'GETTING_ACTIVE_COUNTRY_CASES',\n  CLEAN_ACTIVE_COUNTRY_CASES: 'CLEAN_ACTIVE_COUNTRY_CASES',\n\n  GET_CASES_BY_COUNTRY_NAME: 'GET_CASES_BY_COUNTRY_NAME',\n  GETTING_CASES_BY_COUNTRY_NAME: 'GETTING_CASES_BY_COUNTRY_NAME',\n\n  GET_COUNTRY_IN_VIEW_CASE: 'GET_COUNTRY_IN_VIEW_CASE',\n  GETTING_COUNTRY_IN_VIEW_CASE: 'GETTING_COUNTRY_IN_VIEW_CASE',\n};\n","import { countAT } from './countAT';\n\nconst mostRecentCase = {\n  _id: '',\n  new_cases: 0,\n  new_deaths: 0,\n  total_cases: 0,\n  total_deaths: 0,\n};\n\nconst firstCase = {\n  _id: '',\n  new_cases: 0,\n  new_deaths: 0,\n  total_cases: 0,\n  total_deaths: 0,\n};\n\nconst firstDeath = {\n  _id: '',\n  new_cases: 0,\n  new_deaths: 0,\n  total_cases: 0,\n  total_deaths: 0,\n};\n\nconst initialState = {\n  activeCountry: { _id: '' },\n  gettingCountry: true,\n\n  countries: [],\n  gettingCountries: true,\n\n  activeCountryCases: [],\n  gettingActiveCountryCases: true,\n\n  mostRecentCase,\n  gettingMostRecentCase: true,\n\n  firstCase,\n  gettingFirstCase: true,\n\n  firstDeath,\n  gettingFirstDeath: true,\n\n  gettingCasesByCountryName: true,\n\n  allCountriesCases: [],\n  gettingCountryInView: true,\n};\n\nexport const cont = (state = initialState, action) => {\n  switch (action.type) {\n  case countAT.GET_COUNTRY_BY_NAME:\n    return {\n      ...state,\n      activeCountry:\n          action.country.length > 0 ? action.country[0] : state.activeCountry,\n    };\n  case countAT.GETTING_COUNTRY_BY_NAME:\n    return { ...state, gettingCountry: action.true_or_false };\n\n  case countAT.GET_COUNTRIES:\n    return { ...state, countries: action.countries };\n  case countAT.GETTING_COUNTRIES:\n    return { ...state, gettingCountries: action.true_or_false };\n\n  case countAT.GET_ACTIVE_COUNTRY_CASES:\n    return { ...state, activeCountryCases: action.cases };\n  case countAT.GETTING_ACTIVE_COUNTRY_CASES:\n    return { ...state, gettingActiveCountryCases: action.true_or_false };\n  case countAT.CLEAN_ACTIVE_COUNTRY_CASES:\n    return { ...state, activeCountryCases: [] };\n\n  case countAT.GETTING_CASES_BY_COUNTRY_NAME:\n    return { ...state, gettingCasesByCountryName: action.true_or_false };\n  case countAT.GET_CASES_BY_COUNTRY_NAME:\n    return { ...state, activeCountryCases: action.cases };\n\n  case countAT.CLEAN_MOST_RECENT_CASE:\n    return { ...state, mostRecentCase };\n  case countAT.GET_MOST_RECENT_CASE:\n    return {\n      ...state,\n      mostRecentCase:\n          action.result.length > 0 ? action.result[0] : state.mostRecentCase,\n    };\n  case countAT.GETTING_MOST_RECENT_CASE:\n    return { ...state, gettingMostRecentCase: action.true_or_false };\n\n  case countAT.CLEAN_FIRST_CASE:\n    return { ...state, firstCase };\n  case countAT.GET_FIRST_CASE:\n    return {\n      ...state,\n      firstCase:\n          action.result.length > 0 ? action.result[0] : state.firstCase,\n    };\n  case countAT.GETTING_FIRST_CASE:\n    return { ...state, gettingFirstCase: action.true_or_false };\n\n  case countAT.CLEAN_FIRST_DEATH:\n    return { ...state, firstDeath };\n  case countAT.GET_FIRST_DEATH:\n    return {\n      ...state,\n      firstDeath:\n          action.result.length > 0 ? action.result[0] : state.firstDeath,\n    };\n  case countAT.GETTING_FIRST_DEATH:\n    return { ...state, gettingFirstDeath: action.true_or_false };\n\n  case countAT.GET_COUNTRY_IN_VIEW_CASE:\n    return { ...state, [action.name]: action.cases };\n  case countAT.GETTING_COUNTRY_IN_VIEW_CASE:\n    return { ...state, gettingCountryInView: action.true_or_false };\n  default:\n    return state;\n  }\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './rootReducer';\n\nconst logger = createLogger({\n  diff: true,\n  duration: true,\n  collapsed: true,\n  logErrors: true,\n});\n\nconst middlewares = [ thunk ];\nconst initialState = {};\n\nconst devTools =\n  // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production'\n    ? applyMiddleware(...middlewares)\n    : composeWithDevTools(applyMiddleware(...middlewares, logger));\n\nconst store = createStore(rootReducer, initialState, devTools);\n\nexport default store;\n","import { loadingBarReducer } from 'react-redux-loading-bar';\n\nimport { cont } from './pages/countries/redux/countReducer';\n\nexport default (state = {}, action) => {\n  if (action.type === 'LOGOUT_USER') {\n    state = {};\n  }\n\n  return {\n    cont: cont(state.cont, action, state),\n    loadingBar: loadingBarReducer(state.loadingBar, action, state),\n  };\n};\n","import React from 'react';\n\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const Oval = () => {\n  return (\n    <Spinner\n      style={{\n        margin: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n      }}\n      animation=\"border\"\n      role=\"status\"\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nexport const Error404 = ({ location }) => (\n  <div className=\"container-404\" id=\"error404\">\n    <h1>Error: 404</h1>\n    <p>\n      The requested url <span id=\"pathname\">{location.pathname}</span> was not\n      found on the server.\n    </p>\n  </div>\n);\n\nError404.propTypes = {\n  location: propTypes.shape({\n    pathname: propTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport { Link } from '@reach/router';\n\nexport const NavLink = (props) => {\n  // eslint-disable-next-line react/prop-types\n  const { className } = props;\n  return (\n    <Link\n      {...props}\n      getProps={({ isCurrent }) => {\n        // the object returned here is passed to the\n        // anchor element's props\n        return {\n          className: isCurrent ? `${className} active` : className,\n        };\n      }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport { navigate } from '@reach/router';\nimport { NavLink } from './NavLink';\n\nexport const Navigation = () => {\n  return (\n    <>\n      <Navbar\n        bg=\"dark\"\n        expand=\"md\"\n        sticky=\"top\"\n        variant=\"dark\"\n        collapseOnSelect\n        className=\"top-navigation\"\n      >\n        <Navbar.Brand\n          href=\"/\"\n          onClick={(e) => {\n            e.preventDefault();\n            navigate('/');\n          }}\n        >\n          Coronavirus charts\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavLink\n              to=\"countries\"\n              className=\"nav-link\"\n              data-rb-event-key=\"countries\"\n            >\n              Countries\n            </NavLink>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Sentry from '@sentry/browser';\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: '',\n    hasError: false,\n    errRetryMax: 1,\n    errRetries: Number(localStorage.getItem('errRetries')) || 0,\n  };\n\n  // during initialization, errRetries is set on state\n  // as it mounts, it is reset to 0\n  // once component catches an error, it reloads and\n  // takes the previously saved state and increments it.\n  // this continues till the threshold is reached.\n\n  componentDidMount() {\n    localStorage.setItem('errRetries', 0);\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, info) {\n    // eslint-disable-next-line no-console\n    console.log({ error, info });\n\n    const { errRetries, errRetryMax } = this.state;\n    if (errRetries < errRetryMax) {\n      localStorage.setItem('errRetries', errRetries + 1);\n      // window.location.reload();\n    } else {\n      Sentry.withScope((scope) => {\n        scope.setExtras(info);\n        const eventId = Sentry.captureException(error);\n        this.setState({ eventId });\n      });\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"error__boundary--parent\">\n          <div className=\"error__boundary--body\">\n            <p>\n              Please{' '}\n              <span\n                style={{ cursor: 'pointer', color: '#0077FF' }}\n                onClick={() => {\n                  window.location.reload();\n                }}\n              >\n                refresh\n              </span>{' '}\n              your browser and make sure you have a working internet connection.\n            </p>\n            <p>\n              We would appreciate some feedback on this issue. It will only take\n              a minute. Just click the button below to access the form.\n            </p>\n            <button\n              className=\"btn btn-edit\"\n              onClick={() =>\n                Sentry.showReportDialog({ eventId: this.state.eventId })\n              }\n            >\n              Send feedback\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]).isRequired,\n};\n\nexport { ErrorBoundary };\n","/* eslint-disable no-undef */\nimport React, { Suspense, lazy } from 'react';\nimport { Router } from '@reach/router';\n\nimport { Oval } from './components/Loaders';\nimport { Error404 } from './components/Error404';\nimport { Navigation } from './components/Navigation';\nimport { ErrorBoundary } from './components/ErrorBoundary';\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\n\nconst WorldCases = lazy(() => import('./pages/WorldCases'));\nconst SidebarLeft = lazy(() => import('./pages/SidebarLeft'));\nconst SidebarRight = lazy(() => import('./pages/SidebarRight'));\nconst AllCountries = lazy(() => import('./pages/countries/AllCountries'));\nconst CountryCharts = lazy(() => import('./pages/countries/CountryCharts'));\n\nexport const Routes = () => {\n  return (\n    <ErrorBoundary>\n      <Suspense fallback={<Oval />}>\n        <Navigation />\n\n        <Container fluid className=\"top-level-container\">\n          <Row className=\"top-level-row\">\n            <Col sm=\"2\" className=\"left-column\">\n              <SidebarLeft />\n            </Col>\n\n            <Col sm=\"8\" className=\"middle-column\">\n              <Router\n                basepath={\n                  process.env.NODE_ENV === 'production'\n                    ? process.env.PUBLIC_URL\n                    : '/'\n                }\n              >\n                <WorldCases path=\"/\" />\n                <AllCountries path=\"countries\" />\n                <CountryCharts path=\"countries/:_id\" />\n                <Error404 default />\n              </Router>\n            </Col>\n\n            <Col sm=\"2\" className=\"right-column\">\n              <SidebarRight />\n            </Col>\n          </Row>\n        </Container>\n      </Suspense>\n    </ErrorBoundary>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport axios from 'axios';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport * as Sentry from '@sentry/browser';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport store from './store';\nimport { Routes } from './Routes';\n\nimport './App.scss';\nimport './plot-styles.scss';\nimport './react-toastify-styles.scss';\n\n// eslint-disable-next-line no-undef\nprocess.env.NODE_ENV === 'production' &&\n  Sentry.init({\n    dsn: 'https://cfb32132996b43baad8022e6bf6e07eb@sentry.io/1824714',\n  });\n\naxios.defaults.baseURL =\n  // eslint-disable-next-line no-undef\n  process.env.REACT_APP_BASE_URL || 'https://coronacharts.herokuapp.com/api/v1';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ToastContainer\n        autoClose={2000}\n        position=\"top-center\"\n        className=\"toast-container\"\n        toastClassName=\"dark-toast\"\n      />\n      <Routes />\n    </Provider>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}