{"version":3,"sources":["pages/countries/redux/countActions.js","pages/Spinners.js","pages/reducers.js","pages/SidebarLeft.js"],"names":["getCountries","dispatch","a","type","countAT","GETTING_COUNTRIES","true_or_false","axios","get","data","metadata","results","GET_COUNTRIES","countries","success","response","getCountryCases","_id","GETTING_COUNTRY_CASES","GET_COUNTRY_CASES","cases","cleanGetCountryCases","CLEAN_GET_COUNTRY_CASES","getCasesByCountryName","name","GETTING_CASES_BY_COUNTRY_NAME","GET_CASES_BY_COUNTRY_NAME","BorderSpinner","size","animation","role","className","filterCountRed","state","action","displayCountries","SidebarLeft","useDispatch","useSelector","cont","gettingCountries","useReducer","info","infoDispatch","useEffect","Container","InputGroup","FormControl","onChange","e","query","target","value","filter","c","toLowerCase","includes","placeholder","aria-label","aria-describedby","map","short_name","key","src","alt","to"],"mappings":"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","file":"static/js/7.a1369621.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport { countAT } from './countAT';\n\nexport const getCountries = () => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: true });\n  try {\n    const { data } = await axios.get('/all-countries');\n    const { metadata, results } = data;\n\n    dispatch({ type: countAT.GET_COUNTRIES, countries: results, metadata });\n    dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: false });\n    return data;\n  }\n};\n\nexport const getCountryCases = (_id) => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_COUNTRY_CASES, true_or_false: true });\n  try {\n    const { data } = await axios.get(`/cases?country=${_id}&skip=0&limit=100`);\n    const { metadata, results } = data;\n    dispatch({ type: countAT.GET_COUNTRY_CASES, cases: results, metadata });\n    dispatch({ type: countAT.GETTING_COUNTRY_CASES, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_COUNTRY_CASES, true_or_false: false });\n    return data;\n  }\n};\n\nexport const cleanGetCountryCases = () => async (dispatch) => {\n  dispatch({ type: countAT.CLEAN_GET_COUNTRY_CASES });\n};\n\nexport const getCasesByCountryName = (name) => async (dispatch) => {\n  dispatch({\n    type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n    true_or_false: true,\n  });\n  try {\n    const { data } = await axios.get(\n      `/cases?countryName=${name}&skip=0&limit=100`\n    );\n    const { metadata, results } = data;\n    dispatch({\n      type: countAT.GET_CASES_BY_COUNTRY_NAME,\n      cases: results,\n      metadata,\n    });\n    dispatch({\n      type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n      true_or_false: false,\n    });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({\n      type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n      true_or_false: false,\n    });\n    return data;\n  }\n};\n","import React from 'react';\n\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const BorderSpinner = () => {\n  return (\n    <Spinner\n      size=\"lg\"\n      animation=\"border\"\n      role=\"status\"\n      className=\"border-spinner\"\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n};\n","export const filterCountRed = (state, action) => {\n  switch (action.type) {\n  case 'POPULATE_COUNTRIES':\n    return { ...state, displayCountries: action.displayCountries };\n  case 'FILTER_COUNTRIES':\n    return {\n      ...state,\n      displayCountries: action.displayCountries,\n    };\n  default:\n    return state;\n  }\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { Link } from '@reach/router';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nimport { getCountries } from './countries/redux/countActions';\n\nimport { BorderSpinner } from './Spinners';\nimport { filterCountRed } from './reducers';\n\nconst SidebarLeft = () => {\n  const dispatch = useDispatch();\n  const { countries, gettingCountries } = useSelector((state) => state.cont);\n\n  const [ info, infoDispatch ] = useReducer(filterCountRed, {});\n\n  useEffect(() => {\n    infoDispatch({\n      type: 'POPULATE_COUNTRIES',\n      displayCountries: countries,\n    });\n  }, [ countries ]);\n\n  useEffect(() => {\n    getCountries()(dispatch);\n  }, [ dispatch ]);\n\n  const filterCountries = (query) => {\n    if (!query) {\n      infoDispatch({\n        type: 'FILTER_COUNTRIES',\n        displayCountries: countries,\n      });\n    } else {\n      infoDispatch({\n        type: 'FILTER_COUNTRIES',\n        displayCountries: countries.filter((c) =>\n          c.name.toLowerCase().includes(query.toLowerCase())\n        ),\n      });\n    }\n  };\n\n  return (\n    <Container className=\"left-sidebar sidebar\">\n      <InputGroup className=\"py-3 countries-searchbox\">\n        <FormControl\n          onChange={(e) => {\n            filterCountries(e.target.value);\n          }}\n          placeholder=\"Search\"\n          aria-label=\"Default\"\n          aria-describedby=\"inputGroup-sizing-default\"\n        />\n      </InputGroup>\n\n      {gettingCountries ? (\n        <BorderSpinner />\n      ) : (\n        <Container className=\"countries-list\">\n          {info.displayCountries.map((c) => {\n            const { _id, name, short_name } = c;\n            return (\n              <div className=\"nav-item\" key={_id}>\n                <div className=\"flag-container\">\n                  <img\n                    src={`https://www.countryflags.io/${short_name}/shiny/24.png`}\n                    alt=\"Flag\"\n                  />\n                </div>\n                <Link state={{ name, short_name }} to={`countries/${_id}`}>\n                  {name}\n                </Link>\n              </div>\n            );\n          })}\n        </Container>\n      )}\n    </Container>\n  );\n};\n\nexport default SidebarLeft;\n"],"sourceRoot":""}