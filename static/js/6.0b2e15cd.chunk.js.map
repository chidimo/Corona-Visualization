{"version":3,"sources":["pages/countries/redux/countActions.js","pages/Spinners.js","pages/colors.js","components/CountryPageTitle.js","helpers.js","graph/helpers/xScale.js","dateUtils.js","graph/helpers/plugins.js","graph/helpers/chartCallbacks.js","graph/helpers/chartConfig.js","graph/LineChart.js","pages/countries/CovidLineChart.js","pages/countries/Country.js"],"names":["getCountries","dispatch","a","type","countAT","GETTING_COUNTRIES","true_or_false","axios","get","data","metadata","results","GET_COUNTRIES","countries","success","response","getCountryCases","_id","GETTING_COUNTRY_CASES","GET_COUNTRY_CASES","cases","cleanGetCountryCases","CLEAN_GET_COUNTRY_CASES","getCasesByCountryName","name","GETTING_CASES_BY_COUNTRY_NAME","GET_CASES_BY_COUNTRY_NAME","BorderSpinner","size","animation","role","className","bgColors","info","primary","danger","warning","borderColors","CountryPageTitle","props","short_name","src","alt","tsRegex","monthShortNames","ordinalSuffix","num","j","k","xScale","dataPoints","map","e","timeStamp","match","d","Date","date","getDate","month","getMonth","year","getFullYear","localeFromTSMonthShort","recordDate","plugins","afterDraw","fillColor","chart","easing","yScale","scales","chartArea","ctx","save","fillStyle","globalCompositeOperation","fillRect","left","bottom","width","restore","beforeDraw","undefined","options","gridLines","display","ticks","forEach","label","index","beginPath","lineWidth","stroke","chartCallbacks","fillSquareLegend","fillColors","titles","f","i","container","document","createElement","fillSquare","legendText","style","alignItems","paddingLeft","paddingBottom","height","marginLeft","borderRadius","marginRight","background","textContent","innerHTML","outerHTML","join","chartConfig","xAxisLabel","yAxisLabel","tooltipLabel","borderColor","bgColor","titleFontColor","ttColor","tooltips","enabled","custom","tooltipModel","tooltipEl","getElementById","id","body","appendChild","opacity","classList","remove","yAlign","add","title","bodyLines","bodyItem","lines","innerHtml","split","querySelector","this","_chart","position","canvas","getBoundingClientRect","fontFamily","_bodyFontFamily","fontSize","bodyFontSize","fontStyle","_bodyFontStyle","window","pageXOffset","caretX","top","pageYOffset","caretY","padding","yPadding","xPadding","pointerEvents","legend","xAxes","maxTicksLimit","maxRotation","fontColor","callback","labels","drawBorder","drawOnChartArea","scaleLabel","labelString","yAxes","min","beginAtZero","React","memo","chartReference","useRef","graphLabel","legendLabel","backgroundColor","legendContainerId","yAxesData","Number","useEffect","legendContainer","leg","current","chartInstance","generateLegend","Chart","register","ref","reference","datasets","fill","lineTension","pointRadius","legendCallback","CovidLineChart","spinner","Container","Country","useDispatch","useParams","useLocation","state","useSelector","cont","countryCases","gettingCountryCases","newCases","newDeaths","totalCases","totalDeaths","c","new_cases","new_deaths","total_cases","total_deaths","push","qut"],"mappings":"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","file":"static/js/6.0b2e15cd.chunk.js","sourcesContent":["import axios from 'axios';\n\nimport { countAT } from './countAT';\n\nexport const getCountries = () => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: true });\n  try {\n    const { data } = await axios.get('/all-countries');\n    const { metadata, results } = data;\n\n    dispatch({ type: countAT.GET_COUNTRIES, countries: results, metadata });\n    dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_COUNTRIES, true_or_false: false });\n    return data;\n  }\n};\n\nexport const getCountryCases = (_id) => async (dispatch) => {\n  dispatch({ type: countAT.GETTING_COUNTRY_CASES, true_or_false: true });\n  try {\n    const { data } = await axios.get(`/cases?country=${_id}&skip=0&limit=100`);\n    const { metadata, results } = data;\n    dispatch({ type: countAT.GET_COUNTRY_CASES, cases: results, metadata });\n    dispatch({ type: countAT.GETTING_COUNTRY_CASES, true_or_false: false });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({ type: countAT.GETTING_COUNTRY_CASES, true_or_false: false });\n    return data;\n  }\n};\n\nexport const cleanGetCountryCases = () => async (dispatch) => {\n  dispatch({ type: countAT.CLEAN_GET_COUNTRY_CASES });\n};\n\nexport const getCasesByCountryName = (name) => async (dispatch) => {\n  dispatch({\n    type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n    true_or_false: true,\n  });\n  try {\n    const { data } = await axios.get(\n      `/cases?countryName=${name}&skip=0&limit=100`\n    );\n    const { metadata, results } = data;\n    dispatch({\n      type: countAT.GET_CASES_BY_COUNTRY_NAME,\n      cases: results,\n      metadata,\n    });\n    dispatch({\n      type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n      true_or_false: false,\n    });\n    return { success: true };\n  } catch (e) {\n    const { response } = e;\n    const data = response && response.data;\n    dispatch({\n      type: countAT.GETTING_CASES_BY_COUNTRY_NAME,\n      true_or_false: false,\n    });\n    return data;\n  }\n};\n","import React from 'react';\n\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport const BorderSpinner = () => {\n  return (\n    <Spinner\n      size=\"lg\"\n      animation=\"border\"\n      role=\"status\"\n      className=\"border-spinner\"\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n};\n","export const bgColors = {\n  info: '#d1ebf1',\n  primary: '#cce5ff',\n  success: '#d4edda',\n  danger: '#f8d6da',\n  warning: '#fff3cd',\n};\n\nexport const borderColors = {\n  primary: '#004085',\n  success: '#155724',\n  info: '#0c5460',\n  warning: '#856404',\n  danger: '#721c24',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Container from 'react-bootstrap/Container';\n\nexport const CountryPageTitle = (props) => {\n  const { name, short_name } = props;\n\n  return (\n    <Container className=\"country-page-flag-container\">\n      <div className=\"img64-container\">\n        <img\n          src={`https://www.countryflags.io/${short_name}/shiny/64.png`}\n          alt=\"Flag\"\n        />\n      </div>\n      <h2>{name}</h2>\n    </Container>\n  );\n};\n\nCountryPageTitle.propTypes = {\n  name: PropTypes.string,\n  short_name: PropTypes.string,\n};\n","export const tsRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\n\nexport const monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport const monthShortNames = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nexport const ordinalSuffix = (num) => {\n  // 1st, 2nd, 3rd, 4th, etc.\n  const j = num % 10;\n  const k = num % 100;\n  switch (true) {\n  case j === 1 && k !== 11:\n    return `${num}st`;\n  case j === 2 && k !== 12:\n    return `${num}nd`;\n  case j === 3 && k !== 13:\n    return `${num}rd`;\n  default:\n    return `${num}th`;\n  }\n};\n","import { localeFromTSMonthShort } from '../../dateUtils';\n\nexport const xScale = (dataPoints) => {\n  let xAxesData = dataPoints.map((e) => localeFromTSMonthShort(e.recordDate));\n  return xAxesData;\n};\n","import { tsRegex, monthNames, monthShortNames, ordinalSuffix } from './helpers';\n\nexport const timeStampIsValid = (timeStamp) => {\n  if (!timeStamp) return false;\n  if (!timeStamp.match(tsRegex)) return false;\n  return true;\n};\n\nexport const localeFromTSOrdinal = (timeStamp) => {\n  // 15th January 2020\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  const d = new Date(timeStamp);\n  const date = d.getDate();\n  const month = d.getMonth();\n  const year = d.getFullYear();\n  return `${ordinalSuffix(date)} ${monthNames[month]} ${year}`;\n};\n\nexport const formCompositeTime = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  const spl = timeStamp.split('T');\n  const date = spl[0];\n  const time = spl[1].split('Z')[0];\n  return new Date(`${date} ${time}`);\n};\n\nexport const compositeTimeFromTS = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  const spl = timeStamp.split('T');\n  const date = spl[0];\n  const time = spl[1].split('Z')[0];\n  return new Date(`${date} ${time}`).getTime();\n};\n\nexport const localeFromTSFull = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  // Sunday, 8 November 2020 at 01:00\n  return new Date(timeStamp).toLocaleString('en-GB', {\n    dateStyle: 'full',\n    timeStyle: 'short',\n  });\n};\n\nexport const localeFromTS = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  // Friday, 8 November 2019\n  return new Date(timeStamp).toLocaleString('en-GB', {\n    dateStyle: 'full',\n  });\n};\n\nexport const localeFromTSToDMY = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  // 30/11/2019, 8:00 PM\n  // 15/10/2019, 12:36 PM\n  const options = {\n    hour12: true,\n    day: 'numeric',\n    hour: 'numeric',\n    year: 'numeric',\n    month: 'numeric',\n    minute: 'numeric',\n  };\n  return (\n    new Date(timeStamp)\n      .toLocaleString('en-GB', options)\n      .replace(/0:/, '12:') // format 12 o clock\n      // .replace(/,/, ' at')\n      .replace(/am/, 'AM')\n      .replace(/pm/, 'PM')\n  );\n};\n\nexport const localeFromTSShort = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  // December 6th, 2019\n  const d = new Date(timeStamp);\n  const date = d.getDate();\n  const month = d.getMonth();\n  const year = d.getFullYear();\n  return `${monthNames[month]} ${ordinalSuffix(date)}, ${year}`;\n};\n\nexport const localeFromTSMonthShort = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  // Dec 6th, 2019\n  const d = new Date(timeStamp);\n  const date = d.getDate();\n  const month = d.getMonth();\n  const year = d.getFullYear();\n  return `${monthShortNames[month]}-${ordinalSuffix(date)}-${year}`;\n};\n\nexport const localeFromTSUTC = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  if (!timeStamp.match(tsRegex)) return 'Invalid timestamp';\n  // Friday, 8 November 2019 at 16:44\n  return new Date(timeStamp).toLocaleString('en-GB', {\n    // timeZone: 'UTC',\n    dateStyle: 'full',\n    timeStyle: 'short',\n  });\n};\n\nexport const todayISOStringWithDash = () =>\n  new Date().toISOString().split('T')[0].replace(/\\//g, '-');\n\nexport const todayPlusNDays = (n, asISO = false) => {\n  // add n days to today and returns an ISO or object\n  let future = new Date();\n  future = future.setDate(future.getDate() + n);\n  if (asISO) {\n    return new Date(future).toISOString().split('T')[0].replace(/\\//g, '-');\n  }\n  return new Date(future);\n};\n\nexport const todayMinusNDays = (n, asISO = false) => {\n  // remove n days from today and returns an ISO or object\n  let past = new Date();\n  past = past.setDate(past.getDate() - n);\n  if (asISO) {\n    return new Date(past).toISOString().split('T')[0].replace(/\\//g, '-');\n  }\n  return new Date(past);\n};\n\nexport const timePlusNHoursISO = (date, n) => {\n  const time = new Date(date);\n  const extended = time.setHours(time.getHours() + n);\n\n  return new Date(extended).toISOString().split('T')[1].split('Z')[0];\n};\n\nexport const ISOStringWithDash = (timeStamp) => {\n  if (!timeStamp) return 'Unknown date';\n  return new Date(timeStamp).toISOString().split('T')[0].replace(/\\//g, '-');\n};\n","/* eslint-disable no-unused-vars */\nconst plugins = {\n  afterDraw: (fillColor) => {\n    // draw rectangular area below the x-axis\n    return function (chart, easing) {\n      const yScale = chart.scales['y-axis-0'];\n      const xScale = chart.scales['x-axis-0'];\n      const chartArea = chart.chartArea;\n      yScale.ctx.save();\n      yScale.ctx.fillStyle = fillColor;\n      yScale.ctx.globalCompositeOperation = 'destination-over';\n      yScale.ctx.fillRect(\n        xScale.left,\n        yScale.bottom,\n        xScale.width,\n        chartArea.bottom\n      );\n      yScale.ctx.restore();\n    };\n  },\n\n  beforeDraw: () => {\n    // remove tick marks\n    return function (chart) {\n      const ctx = chart.ctx;\n      const xScale = chart.scales['x-axis-0'];\n      const yScale = chart.scales['y-axis-0'];\n      if (xScale !== undefined) {\n        xScale.options.gridLines.display = false;\n        // yScale.options.gridLines.display = false;\n        xScale.ticks.forEach(function (label, index) {\n          ctx.save();\n          ctx.beginPath();\n          ctx.lineWidth = 1;\n          ctx.stroke();\n          ctx.restore();\n        });\n      }\n    };\n  },\n};\n\nexport default plugins;\n","/* eslint-disable no-unused-vars */\nconst chartCallbacks = {\n  fillSquareLegend: (fillColors, titles) =>\n    function (chart) {\n      const legends = fillColors.map((f, i) => {\n        const container = document.createElement('div');\n        const fillSquare = document.createElement('div');\n        const legendText = document.createElement('span');\n\n        container.style.display = 'flex';\n        container.style.alignItems = 'center';\n        container.style.paddingLeft = '8px';\n        container.style.paddingBottom = '5px';\n\n        fillSquare.style.height = '15px';\n        fillSquare.style.width = '15px';\n        fillSquare.style.marginLeft = '10px';\n        fillSquare.style.borderRadius = '2px';\n        fillSquare.style.marginRight = '10px';\n\n        fillSquare.style.background = f;\n        legendText.textContent = titles[i];\n\n        container.innerHTML = fillSquare.outerHTML + legendText.outerHTML;\n        return container.outerHTML;\n      });\n\n      return legends.join('');\n    },\n};\n\nexport default chartCallbacks;\n","/* eslint-disable no-unused-vars */\nexport const chartConfig = (\n  xAxisLabel,\n  yAxisLabel,\n  tooltipLabel,\n  borderColor,\n  bgColor,\n  titleFontColor,\n  ttColor\n) => {\n  return {\n    tooltips: {\n      enabled: false,\n\n      custom: function (tooltipModel) {\n        const customTooltipDivId = 'custom-tooltip-div-id';\n        // Tooltip Element\n        let tooltipEl = document.getElementById('chartjs-tooltip');\n\n        // Create element on first render\n        if (!tooltipEl) {\n          tooltipEl = document.createElement('div');\n          tooltipEl.id = 'chartjs-tooltip';\n          tooltipEl.innerHTML = `<div id=\"${customTooltipDivId}\"></div>`;\n          document.body.appendChild(tooltipEl);\n        }\n\n        // Hide if no tooltip\n        if (tooltipModel.opacity === 0) {\n          tooltipEl.style.opacity = 0;\n          return;\n        }\n\n        // Set caret Position\n        tooltipEl.classList.remove('above', 'below', 'no-transform');\n        if (tooltipModel.yAlign) {\n          tooltipEl.classList.add(tooltipModel.yAlign);\n        } else {\n          tooltipEl.classList.add('no-transform');\n        }\n\n        function getBody(bodyItem) {\n          return bodyItem.lines;\n        }\n\n        // Set Text\n        if (tooltipModel.body) {\n          const titleLines = tooltipModel.title || [];\n          const bodyLines = tooltipModel.body.map(getBody);\n\n          let innerHtml = '';\n          bodyLines.forEach(function (body, i) {\n            const num = body[i].split(':')[1];\n            innerHtml += '<div id=\"value\">' + num + '</div>';\n            innerHtml += '<div>' + tooltipLabel + '</div>';\n          });\n\n          const tableRoot = tooltipEl.querySelector('#' + customTooltipDivId);\n          tableRoot.innerHTML = innerHtml;\n        }\n\n        // `this` will be the overall tooltip\n        const chart = this._chart;\n        var position = chart.canvas.getBoundingClientRect();\n        const canvas = chart.canvas;\n\n        tooltipEl.style.opacity = 1;\n        tooltipEl.style.position = 'absolute';\n        tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;\n        tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';\n        tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;\n        tooltipEl.style.left =\n          position.left + window.pageXOffset + tooltipModel.caretX + 'px';\n        tooltipEl.style.top =\n          position.top +\n          window.pageYOffset +\n          tooltipModel.caretY -\n          canvas.height / 10 +\n          'px';\n        tooltipEl.style.padding =\n          tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';\n        tooltipEl.style.pointerEvents = 'none';\n      },\n    },\n    title: {\n      display: true,\n    },\n    legend: {\n      display: false,\n      // position: 'top',\n      // fullWidth: true,\n      // align: 'start',\n      // labels: {\n      //   boxWidth: 15,\n      // generateLabels:  function (chart) {\n      //   chart.legend.afterFit = function () {\n      //     const width = this.width; // guess you can play with this value to achieve needed layout\n      //     console.log(width)\n      //     this.lineWidths = this.lineWidths.map(function(){return width;});\n      //     return {\n      //       text: 'label',\n      //       fillStyle: 'red'\n      //     };\n      //   };\n      // }\n      // },\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontSize: 12,\n            display: true,\n            maxTicksLimit: 5,\n            maxRotation: 0,\n            fontColor: borderColor,\n            callback: (label, index, labels) => label.split('-'),\n          },\n          gridLines: {\n            drawBorder: false,\n            drawOnChartArea: false,\n          },\n          scaleLabel: {\n            // display: true,\n            labelString: xAxisLabel,\n          },\n        },\n      ],\n      yAxes: [\n        {\n          display: true,\n          ticks: {\n            min: 0,\n            // display: true,\n            maxTicksLimit: 5,\n            beginAtZero: true,\n          },\n          gridLines: {\n            drawBorder: true,\n            drawOnChartArea: true,\n          },\n          scaleLabel: {\n            // display: true,\n            labelString: yAxisLabel,\n          },\n        },\n      ],\n    },\n  };\n};\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Chart, Line } from 'react-chartjs-2';\n\nimport { xScale } from './helpers/xScale';\nimport plugins from './helpers/plugins';\nimport chartCallbacks from './helpers/chartCallbacks';\nimport { chartConfig } from './helpers/chartConfig';\n\nconst LineChart = (props) => {\n  let chartReference = useRef();\n  let {\n    dataPoints,\n    yAxisLabel,\n    graphLabel,\n    legendLabel,\n    borderColor,\n    tooltipLabel,\n    backgroundColor,\n    legendContainerId,\n  } = props;\n\n  const yAxesData = dataPoints.map((e) => window.Number(e['qut']));\n\n  useEffect(() => {\n    const legendContainer = document.getElementById(legendContainerId);\n    if (chartReference && legendContainer) {\n      const leg = chartReference.current.chartInstance.generateLegend();\n      legendContainer.innerHTML = leg;\n    }\n  }, [ chartReference, legendContainerId ]);\n\n  Chart.plugins.register({\n    beforeDraw: plugins.beforeDraw(),\n  });\n\n  return (\n    <Line\n      width={200}\n      height={75}\n      ref={(reference) => (chartReference.current = reference)}\n      data={{\n        labels: xScale(dataPoints),\n        datasets: [\n          {\n            fill: true,\n            lineTension: 0,\n            pointRadius: 0,\n            data: yAxesData,\n            label: graphLabel,\n            borderColor,\n            backgroundColor,\n          },\n        ],\n      }}\n      options={{\n        // maintainAspectRatio: false,\n        ...chartConfig(\n          'Number of Covid19 cases',\n          yAxisLabel,\n          tooltipLabel,\n          borderColor,\n          '#FAFCFE',\n          '#111111',\n          borderColor\n        ),\n        legendCallback: chartCallbacks.fillSquareLegend(\n          [ borderColor ],\n          [ legendLabel ]\n        ),\n      }}\n    />\n  );\n};\n\nLineChart.propTypes = {\n  dataPoints: PropTypes.array,\n  yAxisLabel: PropTypes.string,\n  borderColor: PropTypes.string,\n  graphLabel: PropTypes.string,\n  legendLabel: PropTypes.string,\n  tooltipLabel: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  legendContainerId: PropTypes.string,\n};\n\nexport default React.memo(LineChart);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport PropTypes from 'prop-types';\n\nimport { BorderSpinner } from '../Spinners';\n\nimport LineChart from '../../graph/LineChart';\n\nconst CovidLineChart = (props) => {\n  const {\n    spinner,\n    graphLabel,\n    dataPoints,\n    yAxisLabel,\n    legendLabel,\n    borderColor,\n    tooltipLabel,\n    backgroundColor,\n    legendContainerId,\n  } = props;\n\n  return (\n    <Container className=\"graph-grid-child mt-5\">\n      <Container className=\"chart-header\">\n        <div className=\"chart-title\">\n          <h3>{graphLabel}</h3>\n        </div>\n        <div className=\"graph-selector-container\"></div>\n      </Container>\n\n      {spinner ? (\n        <BorderSpinner />\n      ) : (\n        <Container className=\"line-chart-container\">\n          <div className=\"left-aligned-legend\">\n            <div id={legendContainerId} className=\"mt-4\"></div>\n          </div>\n          <Container>\n            <LineChart\n              dataPoints={dataPoints}\n              yAxisLabel={yAxisLabel}\n              graphLabel={graphLabel}\n              borderColor={borderColor}\n              legendLabel={legendLabel}\n              tooltipLabel={tooltipLabel}\n              backgroundColor={backgroundColor}\n              legendContainerId={legendContainerId}\n            />\n          </Container>\n        </Container>\n      )}\n    </Container>\n  );\n};\n\nCovidLineChart.propTypes = {\n  spinner: PropTypes.bool,\n  graphLabel: PropTypes.string,\n  borderColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  yAxisLabel: PropTypes.string,\n  legendLabel: PropTypes.string,\n  tooltipLabel: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  legendContainerId: PropTypes.string,\n};\n\nexport default CovidLineChart;\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, useLocation } from '@reach/router';\nimport Container from 'react-bootstrap/Container';\n\nimport { getCountryCases, cleanGetCountryCases } from './redux/countActions';\n\nimport { bgColors, borderColors } from '../colors';\nimport { CountryPageTitle } from '../../components/CountryPageTitle';\nimport CovidLineChart from './CovidLineChart';\n\nconst Country = () => {\n  const dispatch = useDispatch();\n  const { _id } = useParams();\n  const {\n    state: { name, short_name },\n  } = useLocation();\n\n  const { countryCases, gettingCountryCases } = useSelector(\n    (state) => state.cont\n  );\n\n  const newCases = useRef([]);\n  const newDeaths = useRef([]);\n  const totalCases = useRef([]);\n  const totalDeaths = useRef([]);\n\n  // clear state\n  useEffect(() => {\n    getCountryCases(_id)(dispatch);\n    return () => {\n      newCases.current = [];\n      newDeaths.current = [];\n      totalCases.current = [];\n      totalDeaths.current = [];\n      cleanGetCountryCases()(dispatch);\n    };\n  }, [ _id, dispatch ]);\n\n  useEffect(() => {\n    countryCases.forEach((c) => {\n      const {\n        new_cases,\n        new_deaths,\n        total_cases,\n        total_deaths,\n        recordDate,\n      } = c;\n      newCases.current.push({ qut: new_cases, recordDate });\n      newDeaths.current.push({ qut: new_deaths, recordDate });\n      totalCases.current.push({ qut: total_cases, recordDate });\n      totalDeaths.current.push({ qut: total_deaths, recordDate });\n    });\n  }, [ countryCases ]);\n\n  return (\n    <Container className=\"country-graph-page\">\n      <CountryPageTitle name={name} short_name={short_name} />\n\n      <CovidLineChart\n        tooltipLabel={'Cases'}\n        graphLabel={'Total cases'}\n        dataPoints={totalCases.current}\n        legendContainerId={'total-cases'}\n        borderColor={borderColors.warning}\n        backgroundColor={bgColors.warning}\n        spinner={gettingCountryCases}\n        legendLabel={'Total cases of Covid19'}\n        yAxisLabel={'Total number of Covid19 cases'}\n      />\n\n      <CovidLineChart\n        tooltipLabel={'Cases'}\n        graphLabel={'New cases'}\n        dataPoints={newCases.current}\n        legendContainerId={'new-cases'}\n        borderColor={borderColors.success}\n        backgroundColor={bgColors.success}\n        spinner={gettingCountryCases}\n        legendLabel={'New cases of Covid19'}\n        yAxisLabel={'Number of new Covid19 cases'}\n      />\n\n      <CovidLineChart\n        tooltipLabel={'Deaths'}\n        graphLabel={'Total deaths'}\n        dataPoints={totalDeaths.current}\n        borderColor={borderColors.danger}\n        backgroundColor={bgColors.danger}\n        legendContainerId={'total-deaths'}\n        spinner={gettingCountryCases}\n        legendLabel={'Total deaths from Covid19'}\n        yAxisLabel={'Total number of Covid19 deaths'}\n      />\n\n      <CovidLineChart\n        tooltipLabel={'Deaths'}\n        graphLabel={'New deaths'}\n        dataPoints={newDeaths.current}\n        borderColor={borderColors.info}\n        backgroundColor={bgColors.info}\n        legendContainerId={'new-deaths'}\n        spinner={gettingCountryCases}\n        legendLabel={'New deaths from Covid19'}\n        yAxisLabel={'Number of new Covid19 deaths'}\n      />\n    </Container>\n  );\n};\n\nexport default Country;\n"],"sourceRoot":""}